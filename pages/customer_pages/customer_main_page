
import 'package:flutter/material.dart';
import 'package:glassify/database/models/design.dart';
import 'package:glassify/pages/customer_pages/customer_design_details_page.dart';
import 'package:glassify/pages/customer_pages/customer_profile_page.dart';
import 'package:glassify/providers/glassify_user_data_provider.dart';
import 'package:glassify/widgets/customer_card_design.dart';
import 'package:glassify/pages/customer_pages/customer_notifications_page.dart';
import 'package:glassify/pages/customer_pages/customer_search_page.dart';
import 'package:glassify/pages/customer_pages/customer_chats_page.dart';
import 'package:glassify/pages/user_login_page.dart';
import 'package:glassify/providers/app_data_provider.dart';
import 'package:glassify/widgets/list_view_auto_scrolling.dart';
import 'package:glassify/widgets/opacity_button.dart';
import 'package:provider/provider.dart';



class CustomerMainPage extends StatefulWidget {
  const CustomerMainPage({super.key});

  @override
  State<CustomerMainPage> createState() => _CustomerMainPageState();

}

class _CustomerMainPageState extends State<CustomerMainPage> {
  int _currentIndex = 0;

  List<Widget> get _screens => [
    HomeScreen(),
    CustomerSearchPage(),
    CustomerCartPage(),
    CustomerProfilePage(),
  ];

  @override
  Widget build(BuildContext context) {
    final localization = context.read<AppDataProvider>().localization;
    return PopScope(
      canPop: false,
      onPopInvokedWithResult: (result, value) {
        Navigator.pushReplacement(context, CardSlideRoute(builder: (_) =>UserLoginPage(user: null)));
      },
      child: Scaffold(
        body: _screens[_currentIndex],
        bottomNavigationBar: NavigationBar(
          selectedIndex: _currentIndex,
          animationDuration: const Duration(milliseconds: 400),
          onDestinationSelected: _onTapBarItem,
          destinations: [
            NavigationDestination(
              icon: Icon(Icons.home_rounded, size: _currentIndex == 0 ? 25 : 25),
              label: localization.homeLabel,
            ),
            NavigationDestination(
              icon: Icon(Icons.search_rounded, size: _currentIndex == 1 ? 25 : 25),
              label: localization.searchLabel,
            ),
            NavigationDestination(
              icon: Icon(Icons.shopping_cart_rounded, size: _currentIndex == 2 ? 25 : 25),
              label: localization.cartLabel,
            ),
            NavigationDestination(
              icon: Icon(Icons.account_circle_rounded, size: _currentIndex == 3 ? 25 : 25),
              label: localization.profileLabel,
            ),
          ],
          surfaceTintColor: Colors.transparent,
          height: 55,
        ),
      ),
    );
  }

  void _onTapBarItem(int index) {
    setState(() => _currentIndex = index);
  }

}


class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();

}

class _HomeScreenState extends State<HomeScreen> {
  @override
  Widget build(BuildContext context) {
    final textTheme = Theme.of(context).textTheme;
    final colors = Theme.of(context).colorScheme;
    final provider = context.read<AppDataProvider>();
    final localization = provider.localization;
    return Scaffold(
      appBar: AppBar(
        leading: Icon(Icons.home_rounded, size: 30),
        title: Text(localization.appName,
          style: textTheme.headlineMedium?.copyWith(fontWeight: FontWeight.bold),
        ),
        centerTitle: true,
        actions: [
          InkWell(
            borderRadius: BorderRadius.all(Radius.circular(8.0)),
            child: Tooltip(
              message: localization.notificationsLabel,
              child: Padding(
                padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 2),
                child: Badge(
                  backgroundColor: colors.brightness == Brightness.light ? colors.error : colors.errorContainer,
                  textColor: colors.brightness == Brightness.light ? colors.onError : colors.onErrorContainer,
                  isLabelVisible: true,
                  label: Text(
                    '+${localization.formatNumber(99)}',
                    textDirection: TextDirection.ltr,
                  ),
                  offset: Directionality.of(context) == TextDirection.rtl ? Offset(-12, -8) : Offset(1, -8),
                  child: Icon(Icons.notifications_rounded, size: 28),
                ),
              ),
            ),
            onTap: () {
              Navigator.push(context, CardDownRoute(builder: (_) => CustomerNotificationsPage()));
            },
          ),
          const SizedBox(width: 15),
          InkWell(
            borderRadius: BorderRadius.all(Radius.circular(8.0)),
            child: Tooltip(
              message: localization.chatsLabel,
              child: Padding(
                padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 2),
                child: Badge(
                  backgroundColor: colors.brightness == Brightness.light ? colors.error : colors.errorContainer,
                  textColor: colors.brightness == Brightness.light ? colors.onError : colors.onErrorContainer,
                  isLabelVisible: true,
                  label: Text('+${localization.formatNumber(99)}', textDirection: TextDirection.ltr),
                  offset: Directionality.of(context) == TextDirection.rtl ? Offset(-12, -8) : Offset(1, -8),
                  child: Icon(Icons.message_rounded, size: 26),
                ),
              ),
            ),
            onTap: () {
              Navigator.push(context, CardDownRoute(builder: (_) => CustomerChatsPage()));
            },
          ),
          const SizedBox(width: 10),
        ],
      ),
      body: ListView.separated(
        padding: const EdgeInsets.symmetric(vertical: 0.0, horizontal: 5.0),
        itemCount: 20,
        itemBuilder: (_, mainIndex) {
          if(mainIndex % 2 == 1) {
            return Align(
              child: Padding(
                padding: const EdgeInsets.symmetric(horizontal: 5.0),
                child: LayoutBuilder(
                  builder: (_, con) {
                    const spacing = 25.0, defaultWidth = 180.0;
                    final width = con.maxWidth >= 590 ? defaultWidth : (con.maxWidth - spacing) / 2;
                    return Wrap(
                      alignment: WrapAlignment.start,
                      spacing: spacing,
                      runSpacing: 20,
                      children: List.generate(12, (index) {
                        final design = Design(
                          rowId: 'glassify-${index + 3}-glassify',
                          date: DateTime(2025, 6, ((index + 2) % 31) + 1),
                          title: '${localization.categoryLabel} ${index + 2}',
                          description: '${localization.describeDesign} ${localization.categoryLabel} ${index + 2}',
                          designerId: context.read<UserDataProvider>().currentUser?.rowId ?? '23423',
                          imagePath: '', otherImagesPaths: {}, transactions: {},
                          likers: {}, dislikers: {}, comments: {},
                          price: (index * 20) + 21, currency: provider.country!.currencySymbol,
                        );
                        return SizedBox(
                          width: width,
                          height: 320,
                          child: CustomerCardDesign(design: design),
                        );
                      }),
                    );
                  },
                ),
              ),
            );
          }
          return SizedBox(
            height: 300.0,
            child: Column(
              mainAxisAlignment: MainAxisAlignment.start,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                SizedBox(
                  height: 40,
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Padding(
                        padding: const EdgeInsetsDirectional.only(start: 15.0),
                        child: Text(mainIndex % 9 == 0 ? localization.suggestedDesigns : localization.popularDesigns,
                          style: textTheme.titleMedium,
                        ),
                      ),
                      OpacityButton(
                        onPressed: () {
                          Navigator.push(context, CardSlideRoute(builder: (_) => CustomerSearchPage()));
                        },
                        child: Row(
                          children: [
                            Text(localization.seeMore),
                            Icon(Icons.arrow_right_alt, size: 26),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 10),
                Expanded(
                  child: LayoutBuilder(
                      builder: (context, con) {
                        // print('maxHeight: ${con.maxHeight}');
                        const itemsCount = 20;
                        return ListViewAutoScrolling(
                          itemsCount: itemsCount,
                          timerDuration: const Duration(seconds: 5),
                          itemBuilder: (_, index) {
                            final design = Design(
                              rowId: 'glassify-${index + 3}-glassify',
                              date: DateTime(2025, 6, ((index + 2) % 31) + 1),
                              title: '${localization.categoryLabel} ${index + 2}',
                              description: '${localization.describeDesign} ${localization.categoryLabel} ${index + 2}',
                              designerId: context.read<UserDataProvider>().currentUser?.rowId ?? '23423',
                              imagePath: '', otherImagesPaths: {}, transactions: {},
                              likers: {}, dislikers: {}, comments: {},
                              price: (index * 20) + 21, currency: provider.country!.currencySymbol,
                            );
                            return Padding(
                              padding: EdgeInsetsDirectional.only(end: 25.0),
                              child: CustomerCardDesign(design: design),
                            );
                          },
                          itemSize: Size(180, con.maxHeight),
                        );
                      }
                  ),
                ),
              ],
            ),
          );
        },
        separatorBuilder: (_, index) {
          return const SizedBox(height: 10);
        },
      ),

    );
  }

}




class CustomerCartPage extends StatefulWidget {
  const CustomerCartPage({super.key});

  @override
  State<CustomerCartPage> createState() => _CustomerCartPageState();
}

class _CustomerCartPageState extends State<CustomerCartPage> {

  @override
  Widget build(BuildContext context) {
    final provider = context.read<AppDataProvider>();
    final userData = context.read<UserDataProvider>();
    final localization = provider.localization;
    final theme = Theme.of(context);
    final textTheme = theme.textTheme;
    final colors = theme.colorScheme;
    return Scaffold(
      appBar: AppBar(
        title: Text(
          localization.cartLabel,
          style: textTheme.headlineMedium?.copyWith(fontWeight: FontWeight.bold),
        ),
        leading: Icon(Icons.shopping_cart_checkout_rounded, size: 28),
        centerTitle: true,
        actions: [
          IconButton(
            icon: Icon(Icons.more_vert_rounded),
            onPressed: () { },
          ),
          const SizedBox(width: 10),
        ],
      ),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Expanded(
            child: ListView.separated(
              padding: const EdgeInsets.symmetric(horizontal: 4.0),
              itemCount: userData.userCart.length,
              itemBuilder: (_, index) {
                return Card(
                  margin: const EdgeInsets.all(0.0),
                  child: Container(
                    height: 140,
                    padding: const EdgeInsets.symmetric(horizontal: 5.0, vertical: 5),
                    decoration: BoxDecoration(
                      color: colors.surfaceContainerLowest,
                      borderRadius: BorderRadius.circular(10),
                      shape: BoxShape.rectangle,
                      // color: colors.brightness == Brightness.light ? colors.primaryContainer : colors.surfaceContainerLowest,
                    ),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      spacing: 5,
                      children: [
                        MaterialButton(
                          color: colors.surfaceContainerLowest,
                          splashColor: colors.tertiaryContainer,
                          animationDuration: const Duration(milliseconds: 50),
                          shape: RoundedRectangleBorder(
                            side: BorderSide(color: colors.tertiaryContainer, width: 1),
                            borderRadius: BorderRadius.circular(10),
                          ),
                          padding: const EdgeInsets.all(0.0),
                          onPressed: () {
                            Navigator.push(context, CardSlideRoute(builder: (_) => CustomerDesignDetailsPage(design: userData.userCart[index])));
                          },
                          child: Container(
                            // decoration: BoxDecoration(
                            //   shape: BoxShape.rectangle,
                            //   borderRadius: BorderRadius.circular(10),
                            //   border: Border.all(color: colors.tertiaryContainer, width: 1),
                            // ),
                            width: 90,
                            height: 120,
                            margin: const EdgeInsets.symmetric(horizontal: 5.0),
                            child: FlutterLogo(),
                          ),
                        ),
                        Expanded(
                          child: Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 8.0),
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.start,
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  userData.userCart[index].title,
                                  style: textTheme.titleMedium,
                                ),
                                Text(
                                  userData.userCart[index].description,
                                ),
                              ],
                            ),
                          ),
                        ),
                        SizedBox(
                          // color: colors.onTertiaryContainer,
                          width: 80,
                          height: 120,
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            crossAxisAlignment: CrossAxisAlignment.end,
                            children: [
                              IconButton(
                                icon: Icon(
                                  Icons.more_vert_rounded,
                                  size: 26,
                                ),
                                onPressed: () {
                                  // setState(() => userData.userCart.removeDesignFromCart(userData.userCart[index]));
                                },
                              ),
                              Padding(
                                padding: const EdgeInsets.only(bottom: 8.0),
                                child: Row(
                                  textDirection: TextDirection.ltr,
                                  crossAxisAlignment: CrossAxisAlignment.baseline,
                                  textBaseline: TextBaseline.ideographic,
                                  children: [
                                    Text(
                                      localization.getCurrencySymbol(userData.userCart[index].currency),
                                      style: textTheme.bodyMedium?.copyWith(color: colors.tertiary),
                                    ),
                                    const SizedBox(width: 3),
                                    Text(
                                      localization.formatCurrency(userData.userCart[index].price),
                                      style: textTheme.bodyLarge?.copyWith(color: colors.tertiary),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                );
              },
              separatorBuilder: (_, index) {
                return const SizedBox(height: 15);
              },
            ),
          ),
          const SizedBox(height: 5),
          Card(color: colors.surfaceContainerLowest,
            margin: const EdgeInsets.all(0.0),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.vertical(top: Radius.circular(30)),
            ),
            child: ClipPath(
              clipBehavior: Clip.hardEdge,
              clipper: CurvedTopClipper(),
              // margin: const EdgeInsets.all(0),
              child: SizedBox(
                height: 100,
                child: Column(
                  children: [
                    Padding(
                      padding: const EdgeInsetsDirectional.only(start: 20.0, top: 5),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: [
                          Text(
                            '${localization.totalPriceLabel}:   ',
                          ),
                          Row(
                            textDirection: TextDirection.ltr,
                            crossAxisAlignment: CrossAxisAlignment.baseline,
                            textBaseline: TextBaseline.ideographic,
                            children: [
                              Text(
                                localization.getCurrencySymbol(userData.userCart.length > 0 ? userData.userCart[0].currency : ''),
                                style: textTheme.bodyMedium?.copyWith(color: colors.tertiary),
                              ),
                              const SizedBox(width: 3),
                              Text(
                                localization.formatCurrency(userData.userCart.getTotalPrice()),
                                style: textTheme.bodyLarge?.copyWith(color: colors.tertiary),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(height: 5),
                    SizedBox(
                      height: 40,
                      width: double.infinity,
                      child: Row(
                        children: [
                          Expanded(
                            child: Padding(
                              padding: const EdgeInsets.symmetric(horizontal: 20),
                              child: ElevatedButton.icon(
                                icon: Icon(Icons.hardware_rounded),
                                label: Text(
                                  localization.buyDesignButton,
                                ),
                                // style: ElevatedButton.styleFrom(
                                //   minimumSize: Size(100, 40),
                                //   maximumSize: Size(200, 40),
                                // ),
                                onPressed: () { },
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(height: 5),
                  ],
                ),
              ),
            ),
          ),
          // const SizedBox(height: 20),
        ],
      ),
    );
  }

}


class CurvedTopClipper extends CustomClipper<Path> {

  @override
  Path getClip(Size size) {
    Path path = Path();

    path.moveTo(0, size.height);
    path.lineTo(0, 20);

    final leftCurveControl = Offset(0, 0);
    final leftCurveEnd = Offset(30, 0);

    path.quadraticBezierTo(leftCurveControl.dx, leftCurveControl.dy, leftCurveEnd.dx, leftCurveEnd.dy);

    path.lineTo(size.width - 30, 0);

    final rightCurveControl = Offset(size.width, 0);
    final rightCurveEnd = Offset(size.width, 20);
    path.quadraticBezierTo(rightCurveControl.dx, rightCurveControl.dy, rightCurveEnd.dx, rightCurveEnd.dy);


    path.lineTo(size.width, size.height);
    path.close();

    // print(size.toString());
    // path.lineTo(0, size.height);
    // final firstCurve = Offset(0, size.height - 20);
    // final lastCurve = Offset(30, size.height - 20);
    // path.quadraticBezierTo(firstCurve.dx, firstCurve.dy, lastCurve.dx, lastCurve.dy);
    //
    // final secondFirstCurve = Offset(0, size.height - 20);
    // final secondLastCurve = Offset(size.width - 30, size.height - 20);
    // path.quadraticBezierTo(secondFirstCurve.dx, secondFirstCurve.dy, secondLastCurve.dx, secondLastCurve.dy);
    //
    // final thirdFirstCurve = Offset(size.width, size.height - 20);
    // final thirdLastCurve = Offset(size.width, size.height);
    // path.quadraticBezierTo(thirdFirstCurve.dx, thirdFirstCurve.dy, thirdLastCurve.dx, thirdLastCurve.dy);
    //
    // path.lineTo(size.width, 0);
    // path.close();

    return path;
  }

  @override
  bool shouldReclip(covariant CustomClipper<Path> oldClipper) {
    return true;
  }

}


// path.lineTo(0, 30);
//
// // المنحنى الأول
// final firstCurve = Offset(size.width, 0);
// final secondFirstCurve = Offset(size.width, 50);
//
// path.quadraticBezierTo(
// firstCurve.dx, firstCurve.dy,
// secondFirstCurve.dx, secondFirstCurve.dy,
// );
//
// // المنحنى الثاني
// final thirdFirstCurve = Offset(size.width / 1.5, 40);
// final secondLastCurve = Offset(size.width - size.width / 3.25, 20);
//
// path.quadraticBezierTo(
// thirdFirstCurve.dx, thirdFirstCurve.dy,
// secondLastCurve.dx, secondLastCurve.dy,
// );
//
// // المنحنى الأخير
// final thirdLastCurve = Offset(size.width - size.width / 30, 30);
// final lastCurve = Offset(size.width, 10);
//
// path.quadraticBezierTo(
// thirdLastCurve.dx, thirdLastCurve.dy,
// lastCurve.dx, lastCurve.dy,
// );
//
// // يكمل لباقي الويجت (إلى أسفل)
// path.lineTo(size.width, size.height);
// path.lineTo(0, size.height);
// path.close();
//
// return path;




